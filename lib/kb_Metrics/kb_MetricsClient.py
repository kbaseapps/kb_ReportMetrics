# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class kb_Metrics(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='dev',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('kb_Metrics', job_id)

    def _get_app_metrics_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_app_metrics', [params],
             self._service_ver, context)

    def get_app_metrics(self, params, context=None):
        """
        :param params: instance of type "AppMetricsParams" (job_stage has one
           of 'created', 'started', 'complete', 'canceled', 'error' or 'all'
           (default)) -> structure: parameter "user_ids" of list of type
           "user_id" (A string for the user id), parameter "epoch_range" of
           type "epoch_range" -> tuple of size 2: parameter "e_lowerbound" of
           type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970 UTC)
           in milliseconds.), parameter "e_upperbound" of type "epoch" (A
           Unix epoch (the time since 00:00:00 1/1/1970 UTC) in milliseconds.)
        :returns: instance of type "AppMetricsResult" -> structure: parameter
           "job_states" of unspecified object
        """
        job_id = self._get_app_metrics_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_exec_apps_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_exec_apps', [params],
             self._service_ver, context)

    def get_exec_apps(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_exec_apps_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_exec_tasks_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_exec_tasks', [params],
             self._service_ver, context)

    def get_exec_tasks(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_exec_tasks_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_details_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_details', [params],
             self._service_ver, context)

    def get_user_details(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_details_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_total_logins_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_total_logins', [params],
             self._service_ver, context)

    def get_total_logins(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_total_logins_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_ws_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_ws', [params],
             self._service_ver, context)

    def get_user_ws(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_ws_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_narratives_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_narratives', [params],
             self._service_ver, context)

    def get_user_narratives(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_narratives_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_numObjs_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_numObjs', [params],
             self._service_ver, context)

    def get_user_numObjs(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_numObjs_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_metrics_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_metrics', [params],
             self._service_ver, context)

    def get_user_metrics(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_metrics_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_ujs_results_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_ujs_results', [params],
             self._service_ver, context)

    def get_user_ujs_results(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_ujs_results_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _get_user_job_states_submit(self, params, context=None):
        return self._client._submit_job(
             'kb_Metrics.get_user_job_states', [params],
             self._service_ver, context)

    def get_user_job_states(self, params, context=None):
        """
        :param params: instance of type "MetricsInputParams" (unified
           input/output parameters) -> structure: parameter "user_ids" of
           list of type "user_id" (A string for the user id), parameter
           "epoch_range" of type "epoch_range" -> tuple of size 2: parameter
           "e_lowerbound" of type "epoch" (A Unix epoch (the time since
           00:00:00 1/1/1970 UTC) in milliseconds.), parameter "e_upperbound"
           of type "epoch" (A Unix epoch (the time since 00:00:00 1/1/1970
           UTC) in milliseconds.)
        :returns: instance of type "MetricsOutput" -> structure: parameter
           "metrics_result" of unspecified object
        """
        job_id = self._get_user_job_states_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('kb_Metrics.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
